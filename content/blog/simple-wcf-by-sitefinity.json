{
  "publishedAt": "2012-03-16T02:52:46.9870000Z",
  "legacyUrl": "/code/2012/03/16/simple-wcf-by-sitefinity",
  "needsFixing": false,
  "slug": "simple-wcf-by-sitefinity",
  "featuredImage": "/images/stock/500x280/img14.jpg",
  "markdown": true,
  "title": "Simple WCF in Sitefinity",
  "tags": [
    "Tutorial"
  ],
  "content": "## IMPORTANT NOTE\n\nThis article is depreciated as of about SF8.  For services please instead use ServiceStack which is included in sitefinity.  About a billion times faster and way less code.  [Here's](https://gist.github.com/sitefinitysteve/d49c43830fb79d3179d7) a quick Gist that contains all the code you need.\n  \n  \nI've always been an asmx guy mostly for the reason that they're crazy simple to implement.  I mean you just drop a couple files in your webroot, code a quick function with whatever return type and it just always seems to work.\n\nSo sitefinity comes along build using mostly WCF and I have no idea what I'm doing :)  Most blog posts on WCF make it seem crazy complicated with lots code and web.config updates.  Furthermore the documentation over on sitefinity.com (while thorough) WAY over-complicates how simple it is to generate a service.  There's like 7-10 pages of overviews of the archetecture, code, samples, examples, wowza...for a WCF newb it's intimidating.  Here's a quick example: [You're new to WCF, this is your sample](https://www.sitefinity.com/documentation/documentationarticles/developers-guide/deep-dive/client-side-programming/implementing-your-own-restful-wcf-service/implementing-a-sitefinity-restful-wcf-service)...but much to take in at a glance.  HOWEVER, these are STILL good articles once you know what you're doing and comfortable using WCF!  For example [this](https://www.sitefinity.com/documentation/documentationarticles/developers-guide/deep-dive/client-side-programming/implementing-your-own-restful-wcf-service/working-with-the-collectioncontext-class) is a good thing to know, and you can see it in action inspecting the JSON allover Sitefinity.\n\nSo lets just take it back to basics, and do a \"Hello World\" sample in as little code as possible.  Then you can just take the concepts, revisit the docs, and go wild (nerd it up).\n\n### Step 1: Design your Service, we're using REST now, not old-school \"methods\", get in the game nancy!\n\nThis is how I think of this step, it's like adding a layer to asmx saying when a request comes in that looks \"like this\", send the results over to \"here\".\n\n<div class='embeddedscript' data-src=\"https://gist.github.com/sitefinitysteve/7d5263e54b2bcc4b57f76b3fa009850b.js?file=IHelloWorldService1.cs\"></div>\n\nSo you can see that I have three Hello samples, and the basic gist of it is that the curly braces in the Uri match the parameters in the method below...simple! (and badass).  So when a request comes in that matches the signature in \"UriTemplate\", it sends the data to the corresponding method.\n\n### Step 2: Implement the new methods\n\n So in a separate file you want to then create a class that implements that interface and use either VS2010 or [JustCode](https://www.telerik.com/products/justcode.aspx) to help implement the methods.  You can do that by just hovering over the interface name and using the popups the tools give you.  JustCode goes a step farther by underlining the interface name red showing you that you have methods that need implementing, and it won't go away until you do :)\n\n<div class='embeddedscript' data-src=\"https://gist.github.com/sitefinitysteve/7d5263e54b2bcc4b57f76b3fa009850b.js?file=IHelloWorldService2.cs\"></div>\n\n\n### Step 3: Create the .svc file jQuery will...query\n\nOk, now I know this point might be a hot topic since Sitefinity implemented virtual paths, however I still much prefer to have a physical .svc file I can locate on the filesystem.  I will rescind that statement when\\\\if Sitefinity can start aggregating services so I can browse them somehow to see what I have available.\n\nSo the code below goes in a .svc file you make and that's what you point your jQuery ajax calls at.\n\n<div class='embeddedscript' data-src=\"https://gist.github.com/sitefinitysteve/7d5263e54b2bcc4b57f76b3fa009850b.js?file=HelloWorld.svc\"></div>\n\n### Results\n\n**Sample1**: https://www.site.com/HelloWorldService.svc/hello  \n\n```\nHi there buddy\n```\n    \n**Sample2**: https://www.site.com/HelloWorldService.svc/hello/steve  \n\n```\nNice to see you again steve\n```\n    \n**Sample3**: https://www.site.com/HelloWorldService.svc/hello/steve?lastname=scott&age=30  \n\n```\nNice to see you again steve scott, 30 seems old\n```\n    \n**Note**: https://www.site.com/HelloWorldService.svc/help will show you all the Uris you're exposing automatically\n\n### Wrap-Up\n\nSo clearly there's a lot more, and that's all covered in the Sitefinity Documentation.  Like returning objects, PUT\\\\DELETE requests, etc.  The purpose of this blog post however was just to get you started with a simple service to get off the asmx habit :)",
  "seoMetaImage": "/images/stock/500x280/img14.jpg",
  "seoDescription": "Sitefinity pre v8 uses WCF services, this is a simple tutorial on crafting your own services through their layer."
}