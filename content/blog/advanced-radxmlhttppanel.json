{"title":"Advanced RadXmlHttpPanel","needsFixing":false,"content":"One of the best telerik controls right now is the RadXmlHttpPanel...well best if you want good quick client-side functionality.\n\nThe biggest problem with Microsoft Ajax is that it\u0027s not REAL ajax, it\u0027s Asyc-Javascript-And-Html.  Use firebug and have a look at the values posted back to the server.  You get all the bloat that comes with standard asp.net (viewstate, html, etc).\n\nThe cool part about this telerik control is that it\u0027s REAL ajax.  It\u0027s like a quick way to do a jQuery ajax callback...Post up a single string and the control returns whatever you want.  The only complaint is that the documentation for the control is lacking; they don\u0027t list client-side functions.\n\nLlets start with a sample, put a RadXmlHttpPanel on your page somewhere.\n\nWhat happens here when the page loads is you see nothing...there\u0027s an empty **div** with the class name of \"xmlHttpResult\".  We need to wire up the clientside events to RETURN data into the div....think of the control as a placeholder for returned data.\n\nSo sending data to the control is as simple as getting a reference to the clientside object and calling \"set\\_value(\u0027my value\u0027);\"!  So by default the easiest thing to insert in a string, delimited if you want...however the more slick method (and less errorprone) is the following Javascript Serializer.  \n\n\u003cdiv class\u003d\u0027embeddedscript\u0027 data-src\u003d\"https://gist.github.com/sitefinitysteve/ffca226c4b1d2c1e37338fb88033388f.js\"\u003e\u003c/div\u003e\n\nOk so this is my code from an external .js file which I use to send the values up.  The panel object is a reference to the RadXmlHttpPanel.  You can either use jQuery to find it by partial ID (since the RadControls dont yet fully support ClientIDMode Static), or you can plop a function in your aspx page to return you the clientID of the panel.\n\nOk so the clientside is done...we\u0027re sending values, now we need to make the service to receive the data.  Look up above at the WebMethodPath parameter...that\u0027s the URL to the asmx file.  The WebMethodName is the name of the function this control will call.\n\n**THIS IS IMPORTANT:**  \nThe structure of the webmethod **MUST** match this signature or it will fail\n\n```\n[WebMethod(CacheDuration\u003d0)]\npublic string CreateRequest(object context) {\n    IDictionary\u003cstring, object\u003e contextDictionary \u003d (IDictionary\u003cstring, object\u003e)context;\n    string sentValues \u003d ((string)contextDictionary[\"Value\"])\n```\n\nThe above method is how you extract a simple string, listed below is how you de-serialize an object (if you sent one up instead of a string)\n\n```\npublic string ApproveRequest(object context) {\n    IDictionary\u003cstring, object\u003e contextDictionary \u003d (IDictionary\u003cstring, object\u003e)context;\n    string sentValues \u003d ((string)contextDictionary[\"Value\"]);  //Get the String\n \n    JavaScriptSerializer serializer \u003d new JavaScriptSerializer(); //Initalize the Serializer\n    Object value \u003d serializer.Deserialize(sentValues, typeof(Object)); //Convert to Object\n    Dictionary\u003cString, object\u003e values \u003d (Dictionary\u003cstring, object\u003e)value; //Convert back to Dictionary\n \n    Dictionary\u003cstring, object\u003e inputs \u003d new Dictionary\u003cstring, object\u003e();\n    inputs.Add(\"InApprovalID\", values[\"ApprovalID\"].ToString());\n    inputs.Add(\"InStatusID\", values[\"StatusID\"].ToString());\n    inputs.Add(\"InComments\", values[\"Comments\"].ToString());\n \n    ApprovalCommand wf1 \u003d new ApprovalCommand();\n \n    IDictionary\u003cstring, object\u003e outputs \u003d WorkflowInvoker.Invoke(wf1, inputs, TimeSpan.FromMinutes(2));\n     \n    return serializer.Serialize(outputs);\n}\n```\n\nSo there you go, this is the full WebMethod.  Notice that I want my workflow to return me a bunch of outargs, and I\u0027m just re-using the Serializer to convert them back into a string which I can then deserialize in my javascript...SWEET!\n\nIf you want to return a message back to the control to lets say, close a RadWindow on callback, then you want the \"Ending\" event.  The documentation right now doesn\u0027t list this, but this is the way to get the returning value\n\n```\nfunction newRequestCallbackEnding(sender, args) {\n    var result \u003d args.get_content();  //get_content gets the html or whatever you sent back\n    if (result \u003d\u003d \"success\") { //Value sent back from the service string\n        RefreshParentPage(); //impliment closing of the RadWindow\n    }\n}\n```\n\n### NOTE\nIf you set the .Value property of the RadXmlHttpPanel like the code below when the page renders, the callback AUTOMATICALLY happens.  No need to do it on pageLoad or document.ready!\n\n```\nprotected void Page_PreRender(object sender, EventArgs e){\n    if (this.DateID !\u003d Guid.Empty) {\n        this.RadXmlHttpPanel.Value \u003d this.DateID.ToString();\n    }\n}\n```\n\nHappy RadXmlHttpeeing!","featuredImage":"/images/stock/500x280/img11.jpg","seoDescription":"Tutorial on using the RadXmlHttpPanel to send asyc data","seoMetaImage":"/images/stock/500x280/img11.jpg","publishedAt":"2012-03-16T01:30:57.2470000Z","slug":"advanced-radxmlhttppanel","legacyUrl":"/code/2012/03/16/advanced-radxmlhttppanel","markdown":true,"tags":["Tutorial"]}