{
  "tags": [
    "Tutorial"
  ],
  "publishedAt": "2022-04-07T11:42:59.789Z",
  "title": "Adding a class to HTML when a custom widget is on the page",
  "slug": "adding-a-class-to-html-when-a-custom-widget-is-on-the-page",
  "content": "The scenario where you need to change styling on the site, or inform other widgets based on some *other* widget on the page is so common in Sitefinity. It can quite easily be done client-side as well, something like...\n\n```\nif($(\".my-toolbar\").length > 0){\n  $(\"body\").addClass(\"toolbar-exists\");\n}\n```\nNow you could style the rest of the page based on the idea that a toolbar now exists.  Maybe your header needs extra margins, or some element needs to be absolute, or heck maybe it's just a 3/9 grid that has a toolbar.\n\nThe issue with clientside though is the page has to render, then the script has to run, and you're *going* to see some popping of elements as that class is applied to body and it's rules take effect.\n\nThe PROPER way to do this is to put it into the Server-Side so the page renders with that class.  Let me prefix this by saying it's something Sitefinity should add to their API, something like the ICustomWidgetVisualization where I can just tell it the class name I want, and if it's on the page it'll render in there. Sitefinity team, please take note, this would be really quite a great API feature for devs, solve a lot of problems for juniors or people new to the platform.\n\nAnyway, here's what I came up with.\n\nInspiration came from the javascript feather widget which was somehow able to render content in the header or bottom of the page. You can checkout the code over on the [(old?) git repo](https://github.com/Sitefinity/feather-widgets/blob/master/Telerik.Sitefinity.Frontend.InlineClientAssets/Mvc/Controllers/JavaScriptController.cs). The widget hooks into the PagePreRender to inject it into those places!... so that means we can also hijack the rendering!\n\nLets start by adding this to your Controller Index method somewhere\n```\n    var context = Telerik.Sitefinity.Services.SystemManager.CurrentHttpContext;\n    if(context != null){\n        var page = context.CurrentHandler.GetPageHandler();\r\n\r\n        if (page != null)\r\n        {\r\n            page.PreRenderComplete += this.PagePreRenderCompleteHandler;\r\n        }\n    }\n```\n\nGetPageHandler() is an extension method so go ahead and add this using clause as well\n```\nusing Telerik.Sitefinity.Frontend.Mvc.Infrastructure;\n```\n\nNow here's the handler we're going to use\n```\n        /// <summary>\r\n        /// Handler called when the Page's PreRenderComplete event is fired.\r\n        /// </summary>\r\n        /// <param name=\"sender\">The sender.</param>\r\n        /// <param name=\"e\">The <see cref=\"System.EventArgs\" /> instance containing the event data.</param>\r\n        private void PagePreRenderCompleteHandler(object sender, EventArgs e)\r\n        {\r\n            try\r\n            {\r\n                var widgetClassName = \"my-toolbar\";\r\n                var page = (Page)sender;\r\n                foreach(Control c in page.Controls)\r\n                {\r\n                    if(c.GetType().Name == \"MvcMasterPage\")\r\n                    {\r\n                        var layout = c;\r\n                        foreach(var child in layout.Controls)\r\n                        {\r\n                            if(child is LiteralControl)\r\n                            {\r\n                                var literal = (LiteralControl)child;\r\n                                if (literal.Text.Contains(\"<body\") && !literal.Text.Contains(widgetClassName))\r\n                                {\r\n                                    literal.Text = literal.Text.Replace($\"class=\\\"\", $\"class=\\\"{widgetClassName} \");\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Debug.WriteLine(ex);\r\n            }\r\n        }\n```\n\nBasically we're finding the root Layout, then looping through it's controls to find the one that contains the body element, and then we're just hijacking the class name to append our widget class name (if it doesn't already exist).\n\n#### IMPORTANT NOTE ####\nFor this to work, your <body element in your \\ResourcePackages\\ThemeName\\Mvc\\Views\\Layouts\\layoutname.cshtml needs to have **class=\"\"** applied, even if there's nothing in it.\n\n```\n   <!-- At a bare minimum because we need to hijack it -->\n   <body class=\"\">\n```",
  "seoDescription": "How to add class names to your HTML when your custom Sitefinity Widgets exist on the page."
}