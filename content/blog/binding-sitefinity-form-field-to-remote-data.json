{
  "tags": [
    "Tutorial",
    "Sitefinity"
  ],
  "publishedAt": "2020-09-29T18:03:07.941Z",
  "title": "Populating a Sitefinity Form Field from a remote API",
  "slug": "binding-sitefinity-form-field-to-remote-data",
  "seoDescription": "Populating a Sitefinity Form Dropdown with Data from an API couldn't be more simple with Javascript, here's how you can accomplish it.",
  "content": "I was inspired to make this post by a thread on the official forums.  Basically the idea is you want to pre-populate some data in a form field from a remote source, not statically from the UI.  You might first end up on the KB Article on [making custom form widgets](https://knowledgebase.progress.com/articles/Article/how-to-prepopulate-values-in-form-based-on-custom-criteria), but geez that's complex.  I've been burned on it in the past as well. Like I had a complex custom forms widget in webforms just for his, then MVC forms showed up and it was all trash because it didn't work with MVC.\n\nSo conceptually trash all this, it's so unbelievably simple to just push complexity to the frontend, and you don't even need a developer to do this for you!\n\n### Form\n\n* Open your form\n* Add a Textbox\n* Give it a custom class name (something you can get a hold of with javascript)\n\n### Page\n* Open the page\n* Add your form to the page\n* Add a Javascript widget\n* [Implement a remote bound dropdown](https://demos.telerik.com/kendo-ui/dropdownlist/remotedatasource)\n\nThis is the code from that sample to use... So for example this will save the ProductID back to the Sitefinity form results\n\n(You can even just paste this into your chrome dev console and run it live)\n\n```\n$(\".form-control.input-lg\").kendoDropDownList({\n                        dataTextField: \"ProductName\",\n                        dataValueField: \"ProductID\",\n                        dataSource: {\n                            transport: {\n                                read: {\n                                    dataType: \"jsonp\",\n                                    url: \"https://demos.telerik.com/kendo-ui/service/Products\",\n                                }\n                            }\n                        }\n                    });\n```\n\nWhere this would save back the ProductName itself\n\n```\n$(\".form-control.input-lg\").kendoDropDownList({\n                        dataTextField: \"ProductName\",\n                        dataValueField: \"ProductName\",\n                        dataSource: {\n                            transport: {\n                                read: {\n                                    dataType: \"jsonp\",\n                                    url: \"https://demos.telerik.com/kendo-ui/service/Products\",\n                                }\n                            }\n                        }\n                    });\n```\n\nJust replace the *transport.read* with your actual endpoint, and the data fields to your JSON properties.\n\nNow just to be clear, this is using only KendoUI, you can literally use anything you want, it's just kendo is bundled with Sitefinity so it's free to use. But you could just as easily use any library as long as it's available on the clientside."
}