{
    "title": "How PreCompiled templates work",
    "needsFixing": false,
    "content": "I asked support how precompiled templates work, and how we could implement them ourselves (site with slow load time)  \n  \nThis was the response...some great info in here from the gurus  \n  \n\n\u003e Each of our ASP.Net controls has a template, which has a virtual path. When a request comes for a page that contains this control, we resolve the virtual path and we try to load the control from the Telerik.Sitefinity.PrecompiledTemplates assembly (this is much faster than letting asp.net compile the control ). The assembly was made using the [asp.net compiler](https://msdn.microsoft.com/en-us/library/ms229863%28v\u003dvs.80%29.aspx) tool and [asp.net merge](https://msdn.microsoft.com/library/bb397866.aspx) tool against the final build version of Sitefinity. You can read more about web site precompilation / packaging [here](https://msdn.microsoft.com/en-us/library/399f057w%28v\u003dvs.85%29.aspx) . If the requested template is not present in the assembly, we fetch the template from the database, check if it is different from the original and only then do we use the asp.net framework to compile the control given its virtual path â€“ you can look at the System.Web.Compilation namespace and more precisely the System.Web.Compilation.BuildManager class -\u003e CreateInstanceFromVirtualPath method.",
    "featuredImage": "/images/stock/500x280/img4.jpg",
    "seoDescription": "Sitefinity 5.4 introduced precompiled templates, this is how it all works.",
    "seoMetaImage": "/images/stock/500x280/img4.jpg",
    "publishedAt": "2013-07-23T12:19:15.9430000Z",
    "slug": "how-precompiled-templates-work",
    "legacyUrl": "/code/2013/07/23/how-precompiled-templates-work",
    "markdown": true,
    "tags": [
        "Tutorial"
    ]
}