{
  "publishedAt": "2017-10-01T03:41:15.0500000Z",
  "legacyUrl": "/code/2017/10/01/supercharge-sitefinity-load-times-with-roslyn",
  "needsFixing": false,
  "slug": "supercharge-sitefinity-load-times-with-roslyn",
  "featuredImage": "/images/stock/500x280/img7.jpg",
  "markdown": true,
  "title": "Supercharge Sitefinity load times with Roslyn",
  "tags": [
    "Tutorial"
  ],
  "content": "Hidden in the 10.1 [startup time tips](https://www.sitefinity.com/blogs/vladimir-vasilev-blog/2017/07/13/sitefinity-cuts-web-site-startup-time-in-half) is a GEM!  The roslyn section is not only just glazed over, but there's no direct instructions on how to enable it... it's crazy easy though, lets get to it.  \n\nBackground: Why is it a problem\n-------------------------------\n\nAsp.net (and thus sitefinity) uses a runtime compilation to compile assets together.  I'm sure we're all acutely aware of this, whenever we request a new sitefinity page after build or recycle, there's just a painfully long wait time, that's the compiler at work.  \n  \nYou can even WATCH it happen if you are developing locally or are remote into your server.   \n  \nOpen the windows task manager and hangout around the \"c\"'s in the details tab.  Once the status gears page finishes bootstrapping you'll see \"csc.exe\" keep popping up and disappear; this is the compilation at work... and it's slow.  \n  \nSo just to clarify here, it's RUNTIME compilation, not BUILDTIME.  \n\nRoslyn to the rescue\n--------------------\n\nSo Roslyn is the name for Microsofts new compiler, it's lightyears faster than the default compiler.  Telerik estimates at least 6 times faster, in a large site Microsoft profiled it from 15 minutes down to just 70 seconds... but regardless it's just night and day.  \n\nHow to use in Sitefinity\n------------------------\n\nI'm not sure if you need to be on v10.1 or not, but I tried to enable on another devs 9.0 project and had issues, maybe unrelated though.  \n  \n1) Open your Sitefinity project in visual studio  \n2) Right-Click your web project, Manage Nuget Packages  \n3) Search for \"Roslyn\" and install [this guy](https://www.nuget.org/packages/Microsoft.CodeDom.Providers.DotNetCompilerPlatform)  \n4) Build (This step is important, it adds a roslyn folder to your bin folder)  \n5) ...done :)  \n  \nSo now on a reload you can see \"csc.exe\" loading from the bin folder in your webroot.    \n\\*Note: You might need to add the CommandLine column to the Task Manager if it isn't there already.  \n  \n  \n![CscRoslyn](/images/posts/supercharge-sitefinity-load-times-with-roslyn/cscroslyn.png?sfvrsn=becb8b66_0 \"CscRoslyn\")  \n\n### To enable on your live server\n\n1) Copy all bin folder dlls up along with the new roslyn sub-folder  \n2) Notice the new node at the bottom of your web.config (system.codedom), put this in the live web.config as well.  I'm not going to paste it in here in case it's structure or syntax changes in a future release.  \n3) Done, and like above you can validate it's working with the Task Managers command line column.  \n\nStats?\n------\n\nThis is using my site (this one), loading the homepage, from once the bootstrapping completes.  \n  \nRegular compiler: 38 Seconds to see the homepage  \nRoslyn: **7 Seconds,** and from there it's just crazy peppy.",
  "seoMetaImage": "/images/stock/500x280/img7.jpg",
  "seoDescription": "If you think Sitefinity loads slow, you should update to a version using the new Microsoft Roslyn Compiler, or just hack it into your current version."
}