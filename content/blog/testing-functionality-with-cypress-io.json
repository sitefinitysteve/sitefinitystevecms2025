{
  "publishedAt": "2018-07-20T18:26:08.8030000Z",
  "legacyUrl": "/code/2018/07/20/testing-functionality-with-cypress-io",
  "needsFixing": false,
  "slug": "testing-functionality-with-cypress-io",
  "featuredImage": "/images/stock/500x280/img19.jpg",
  "markdown": true,
  "title": "Testing functionality with cypress.io",
  "tags": [
    "Reviews"
  ],
  "content": "![Cypress.io logo](https://www.cypress.io/static/33498b5f95008093f5f94467c61d20ab/05330/cypress-logo.png)\n\nI have fallen in love with how [cypress.io](https://cypress.io) lets you test the frontend functionality of my sites, it's pretty great. Please note, I am not being paid for this endorsement... its just that great.  \n  \nIn the past I've used C# coded solutions to test the frontend of the site where you record or author tests and they run with browser extensions or other hooks.  But it's just so SLOW writing tests that way, like I burnt a couple hours a few weeks ago trying to figure out how to press enter in a textbox.  The resulting answer was both un-intuative and complicated!  The nice part of these tools is usually they come with recorders so you can just click around and record the results.  Sounds and demo's good when you're just browsing google or static content.  But in the real world you're probably using it to test more complex functionality, so 99% of the time you have to start editing find expressions, or converting the recording to code and trying to figure things out in a custom C# API.... painful.\n\nSo how does cypress make my life easier?\n\n*   It's fast... I mean REALLY fast.  You use VSCode (or any editor really) to author the Mocha\\\\Chai tests.  VS auto-saves and the tests just re-run inside of a custom chrome browser that fires up all configured.  That's right, no more browser extensions slowing down chrome or injecting content, or even needing to close open browsers!\n*   It's javascript based, moreover the element query syntax is just jQuery based, and jQuery is even available to use DURING the test methods to find stuff if you want.  This also means we get the chrome js debugger...\n*   Automatic XHR waiting, so you can hook into async calls and run tests AFTER they complete and assert their results instantly.\n*   Open source, no more needing to pay thousands of dollars a year\n*   It can record screenshots OR video as it runs\n*   You can literally in the UI hover over each test step to see the current DOM state at that time to debug problems.  \n    \n\nSo with the above problem of the enter key, how is it handled with cypress?\n\n<div class='embeddedscript' data-src=\"https://gist.github.com/sitefinitysteve/7c7070cbc2a01d1dfed821f7fba29f4b.js\"></div>\n\nIt's that just beautiful?  Now what if we need to test some mobile features on an iPhone6 sized screen... check this out  \n  \n<div class='embeddedscript' data-src=\"https://gist.github.com/sitefinitysteve/4a1c55a71fc3c3f3d49f5a9a8a48f312.js\"></div>\n\nTADA!  So now obviously you have [complete control over the viewport sizing](https://docs.cypress.io/api/commands/viewport.html#Syntax), but the pre-baked human readable device names are just a nice touch, thats polish right there.  \n\nHere's an example of testing SPA\\\\Clientside xhr async functionality\n\n<div class='embeddedscript' data-src=\"https://gist.github.com/sitefinitysteve/25b0876446f06a31c92c2a7473b3ab2d.js\"></div>\n\nNow if you need to test logged in functionality, I made a quick little helper controller you can use to log your test user in.  PLEASE PLEASE PLEASE wrap it in some code that prevents it from being run arbitrarily.  Block by IP, use a key, maybe only runs in debug or on the dev domain, but do something.  The below code strips out everything I have just so it's clear what's going on.\n\n<div class='embeddedscript' data-src=\"https://gist.github.com/sitefinitysteve/d2b674f325383b4939ab45b278e6e3d6.js\"></div>\n\nI can't recommend this tool enough! Go have fun!\n\nThis is a front end testing suite, so it's not Sitefinity specific, test any site based on anything with it... if you need to test C# CODE, you want to be using a regular UnitTest project, or if the test needs to run in the context of sitefinity (so you can use the API, you need the test runner.  Grab it [at this link](https://docs.sitefinity.com/tutorial-create-integration-tests-with-sitefinity-web-test-runner).\n\n<iframe src=\"https://player.vimeo.com/video/237527670?title=0&amp;byline=0&amp;portrait=0\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen=\"\"></iframe>\n\n  [What is Cypress?](https://vimeo.com/237527670) from [Cypress.io](https://vimeo.com/user72267166) on [Vimeo](https://vimeo.com).",
  "seoMetaImage": "/images/stock/500x280/img19.jpg",
  "seoDescription": "Fast, easy and reliable testing for anything that runs in a browser. Cypress IO is seriously great for testing your site."
}