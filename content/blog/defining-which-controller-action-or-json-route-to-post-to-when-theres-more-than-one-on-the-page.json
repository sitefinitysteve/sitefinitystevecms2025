{
  "tags": [
    "Tutorial"
  ],
  "publishedAt": "2023-08-11T18:56:52.701Z",
  "title": "Defining which Controller Action or Json route to POST to when there's more than one on the page",
  "slug": "defining-which-controller-action-or-json-route-to-post-to-when-theres-more-than-one-on-the-page",
  "seoDescription": "If your custom widget exists more than once on a page, and you want to expose a JsonResult or HttpPost ActionResult, here's how to you target a specific controller so the saved Public Properties are correct.",
  "content": "Sitefinity Controllers are fantastic, you can easily expose public properties and the designers handle saving your preferences back.  But what happens when you have 2 controllers on the page, and they both specify the route of *Foo*\r\n\n\r\n```\r\n[HttpPost]\r\npublic JsonResult Foo()\r\n{\r\n   return Json(new {\r\n                    data = this.SomeProperty\r\n                });\r\n}\r\n```\r\n\n\r\n* Widget Instance 1 this.SomeProperty is set to \"Steve\"\r\n* Widget Instance 2 this.SomeProperty is set to \"Dave\"\r\n\n\r\nSo think about this now, if our page is /bar, and this widget exists on that page TWICE, how would one POST back to /foo/bar and get back Steve if you want Steve, or Dave if you want Dave.\r\n\n\r\nWhat will happen by default at /foo/bar is it's going to give you the first Controller instance, in this case you're ALWAYS going to get \"Steve\".\r\n\r\n\nSo how do we find Dave?\r\n\r\n\nIt's actually REALLY simple, Sitefinity allows you to pass in the control id of Controller you want right on the querystring with *sf_cntrl_id*\r\n\r\n\n```\r\naxios.post(\"/foo/bar?sf_cntrl_id=\" + thewidgetid)\r\n```\r\n\n\r\nNow we're getting Dave back\r\n\r\nThe only missing piece is how to get that ControlId?  Well it's all done for you just part of the ViewData, Sitefinity automatically adds it!\r\n\n\r\n```\r\npublic string ControlDataId\r\n{\r\n    get\r\n    {\r\n        var controlDataId = \"\";\r\n        var keyName = Telerik.Sitefinity.Mvc.Proxy.MvcControllerProxy.ControllerKey;\r\n\r\n        if (this.ViewData != null && this.ViewData.ContainsKey(keyName))\r\n        {\r\n            controlDataId = this.ViewData[keyName].ToString();\r\n        }\r\n\r\n        return controlDataId;\r\n    }\r\n}\r\n```\r\n\n\r\nT﻿hat's all there is to it!\r\n\n\r\nO﻿h, one thing to note, the Html.BeginFormSitefinity helper will AUTOMATICALLY add the controlId stuff in for you in the current instance it's cshtml runs under... but you can't BeginFormSitefinity an XHR post as well obviously."
}